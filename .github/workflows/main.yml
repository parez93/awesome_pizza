name: Build, Test, and Create Release for Spring Boot Application

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests to the main branch
  workflow_dispatch:  # Trigger the workflow manually

jobs:
  build:
    runs-on: ubuntu-latest  # Define the operating system for the workflow (you can choose another one if needed)

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 (or the version you're using)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Change the version if necessary

      # Step 3: Install dependencies and run tests
      - name: Build with Maven and run tests
        run: mvn clean verify -DskipTests=false  # Run `mvn verify` to execute the tests

      # Step 4: If tests pass, build the WAR file
      - name: Build WAR file
        run: mvn clean package -DskipTests=true  # Generate the WAR file without running tests again

      # Step 5: Create a GitHub Release and upload the WAR file
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: 'v${{ github.run_number }}'  # Use a version tag based on the run number
          release_name: 'Release ${{ github.run_number }}'  # Release name with run number
          draft: false  # Mark as a full release (not draft)
          prerelease: false  # Mark as a full release (not a prerelease)

      # Step 6: Upload the WAR file as part of the release
      - name: Upload WAR to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.war  # Path to the WAR file
          asset_name: my-app.war  # Name the WAR file
          asset_content_type: application/zip  # Set the MIME type for the WAR file
